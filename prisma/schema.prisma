// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model BookedTicket {
  id        String   @id @default(cuid())
  seat      Int
  flightId  String
  flight    Flight   @relation(fields: [flightId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id              String   @id @default(cuid())
  name            String
  countryName     String
  departureCity   Flight[] @relation("departureCity")
  destinationCity Flight[] @relation("destinationCity")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Flight {
  id                String         @id @default(cuid())
  startTime         DateTime
  endTime           DateTime
  startDate         DateTime
  endDate           DateTime
  numberOfSeat      Int
  departureCityId   String
  destinationCityId String
  departureCity     City           @relation("departureCity", fields: [departureCityId], references: [id])
  destinationCity   City           @relation("destinationCity", fields: [destinationCityId], references: [id])
  volType           String         @default("Direct") // Enum
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  BookedTicket      BookedTicket[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?        @unique
  passsword     String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  BookedTicket  BookedTicket[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
